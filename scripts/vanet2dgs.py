from lxml import etree
import sys
import fileinput
from xml.sax.saxutils import XMLGenerator
from xml.sax.xmlreader import AttributesNSImpl
from optparse import OptionParser
from dgsWriter import *

parser = OptionParser("usage: %prog [options]")
parser.add_option('--vanetFile', help=("VANET file."), type="string", dest="vanetFile")
parser.add_option('--dgsFile', help=("DGS output"), type="string", dest='dgsFile')
parser.add_option('--fromNS3', help=("If the vanet file was generated by NS3 (contains MAC address)"), action='store_true', default=False, dest="fromNS3" )
(options, args) = parser.parse_args()

print options

# check set options
if not options.vanetFile or not options.dgsFile:
	print "Usage: vanet2dgs --vanetFile <FILE> --dgsFile <FILE>" 
	print "[--fromNS3]"
	print "Exiting..."
	exit()

macMap = {}
currentStep = -1
stepVehicles = []
runningVehicles = []
edges = {}
edgesStepCount = 0
edgesCount = 0
nodesCount = 0
nodesStepCount = 0
addedNodsCount = 0
edgesToAdd = []
edgesToRemove = []

def populateMacMap(elem, args={}):
	#print line	
	global macMap
	elem = line.split(' ')
	if len(elem) > 5:
		vehicleId = str(elem[2])
		vehicleMac = str(elem[5])
		macMap[vehicleMac] = vehicleId
	return 

def processLine(line, args={}):
	#print line	
	global macMap
	global stepVehicles
	global runningVehicles
	global currentStep
	global edges 
	global nodesCount
	global nodesStepCount
	global edgesCount
	global edgesStepCount
	global addedNodsCount
	global edgesToAdd
	global edgesToRemove

	#1 21631 21 23094 21968.5 00:00:00:00:00:16 2 00:00:00:00:00:20,1 00:00:00:00:01:f7,1 
	elem = line.split(',')
	step = float(elem[0])
	time = float(elem[1])
	vehicleId = str(elem[2])
	vehicleX = float(elem[3])
	vehicleY = float(elem[4])
	vehicleMac = str(elem[5])
	vehicleNumberOfEdges = int(elem[6])
	vehicleEdges = []
	for i in range(0,vehicleNumberOfEdges):
		neighborId = str(elem[7+i]).strip()
		if options.fromNS3:
			neighborId = macMap[elem[7+i]]
		vehicleEdges.append(neighborId)

	# next step
	# populate array removedVehicles with vehicles who were in the previous step but are not in the step any more
	# write del in dgs
	if step != currentStep:	
		print "currentStep: {},  nodesStepCount: {}, edgesStepCount: {}, addedNodsCount: {} ".format(currentStep, nodesStepCount, edgesStepCount, addedNodsCount)
		currentStep = step
		edgesCount += edgesStepCount
		nodesCount += nodesStepCount
		edgesStepCount = 0
		nodesStepCount = 0
		addedNodsCount = 0
		for edge in edgesToAdd:
			dgsWriter.writeAddEdge(edge[0], edge[1], edge[2])
		for edgeId in edgesToRemove:
			dgsWriter.writeDelEdge(edgeId)
		dgsWriter.writeStep(step)
		if len(stepVehicles) > 0:
			removedVehicles = []
			for vehicle in runningVehicles:
				if not vehicle in stepVehicles :
					removedVehicles.append(vehicle)
			for vehicle in removedVehicles:
				runningVehicles.remove(vehicle)
				if vehicle in edges:
					removekey(edges, vehicle)
				dgsWriter.writeDelNode(vehicle)
				print "deleting node {}".format(vehicle) 
				nodesStepCount -= 1
		stepVehicles = []

	stepVehicles.append(vehicleId)
	nodesStepCount += 1

	# update running vehicles
	#new vehicle
	if not vehicleId in runningVehicles:
		# add node
		dgsWriter.writeAddNode(vehicleId, vehicleX, vehicleY)
		runningVehicles.append(vehicleId)
		addedNodsCount += 1
	# change vehicle
	else:
		dgsWriter.writeChangeNode(vehicleId, vehicleX, vehicleY)

	# edges 
	if vehicleNumberOfEdges > 0:
		if vehicleId not in edges:
			edges[vehicleId] = []
		# add / modify
		for neighborId in vehicleEdges:
			edgesStepCount += 1
			# if new edge
			if not neighborId in edges[vehicleId] and ((neighborId not in edges ) or (neighborId in edges and not vehicleId in edges[neighborId])):
				edges[vehicleId].append(neighborId)
				edgeId = (vehicleId+'-'+neighborId)
				edgesToAdd.append([edgeId, vehicleId, neighborId])
				# dgsWriter.writeAddEdge(edgeId, vehicleId, neighborId)
			# if edge changed - we do not handle it now
			#else:
		# remove 
		edgesToRemove = []
		for edge in edges[vehicleId]:
			if not neighborId in vehicleEdges:
				print 'removing edge '+neighborId
				# dgsWriter.writeDelEdge(vehicleId+'-'+neighborId)
				edgesToRemove(vehicleId+'-'+neighborId)
		
	return 0

def removekey(d, key):
    r = dict(d)
    del r[key]
    return r


#################

dgsWriter = DGSWriter(options.dgsFile)
dgsWriter.writeHeader("DGS004", "vanet", 0, 0)
if options.fromNS3:
	for line in fileinput.input(options.vanetFile):
		populateMacMap(line, args)
for line in fileinput.input(options.vanetFile):
	processLine(line, args)

print "currentStep: " + str(currentStep) + ", nodesStepCount: " + str(nodesStepCount) + ", edgesStepCount: " + str(edgesStepCount)
print "nodesCount: " + str(nodesCount) + ", edgesCount: " + str(edgesCount)
